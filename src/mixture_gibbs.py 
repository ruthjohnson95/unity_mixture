#!/usr/bin/env python

from optparse import OptionParser
import logging
import sys
import numpy as np
import scipy.stats as st
import os
import pandas as pd

# global variables
logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S', level=logging.INFO)

def gibbs(p_init, gamma_init, C_init, mu_vec, sigma_vec, W, A, psi, beta_tilde, its):

    K = len(mu_vec)

    for k in range(0, K):


    return p_t


def precompute(W, beta_tilde):
    A = np.matmul(np.transpose(W), W)
    M = W.shape[0]
    psi = np.empty((M,M))
    for m in range(0,M):
        psi[:,m] = np.matmul(np.transpose(beta_tilde), W[:,m])
    return A, psi


def initialize_p(K):
    # random draw to initialize values
    p_init = np.random.dirichlet([1]*K,1)
    return p_init


def initialize_gamma(mu_vec, sigma_vec, M):
    # create empty array to hold values
    K = len(mu_vec)
    gamma_init = np.empty((M,K))

    for k in range(0, K):
        gamma_init[:, k] = st.norm.rvs(mu_vec[k], sigma_vec[k], size=M)

    return gamma_init


def initialize_C(p_init, M):
    # create empty array to hold values
    C_init = st.multinomial.rvs(p=p_init,n=M)

    return C_init


def main():
    parser = OptionParser()
    parser.add_option("--name", dest="name", default="sim")
    parser.add_option("--gwas_file", dest="gwas_file", default="sim.100.txt")
    parser.add_option("--mu_vec", dest="mu_vec", nargs='+', default="-.10 0 .10")
    parser.add_option("--sigma_vec", dest="sigma_vec", nargs="+", default=".001 .001 .001")
    parser.add_option("--bins", dest="bins")
    parser.add_option("--ld_half_file", dest="ld_half_file")
    parser.add_option("--N", dest="N", default=100000)
    parser.add_option("--seed", dest="seed", default=100)
    parser.add_option("--outdir", dest="outdir", default="/Users/ruthiejohnson/Development/mixture_unity")
    parser.add_option("--precompute", dest="precompute", default='y')
    parser.add_option("--its", dest=its,default=500)
    (options, args) = parser.parse_args()

    # parse command line args
    seed = int(options.seed)
    its = int(option.its)
    N = int(options.N)
    name = options.name
    gwas_file = options.gwas

    df = pd.read_csv(gwas_file)
    beta_tilde = df['BETA_STD_I']

    # set seed
    np.random.seed(seed)

    ld_half_file = options.ld_half_file
    W = np.loadtxt(ld_half_file)
    logging.info("Using ld half file: %s" % ld_half_file)

    if precompute == 'y':
        logging.info("Pre-computing terms")
        nu = precompute(mu_vec, W)

    p_init = initialize_p(K)

    p_t = gibbs(p_init, mu_vec, sigma_vec, W, A, psi, beta_tilde, its)


if __name__== "__main__":
  main()
